Hyper Text : HT
Hyper Text Markup Lang :  HTML
Hyper Text Transfer Protocal : HTTP 
Cascading Style Sheets : CSS
Database Management System : DBMS
javascript/jQuery

Version Control System : VCS
-소스코드의 변경 시점 관리
-어떤 내용을 누가 어느시점에 변경했는지 관리
-git, svn 등이 많이 사용됨

Intergrated Development Environment : IDE
-통합개발환경
-소스코드의 변경 시점 관리
-소스코드 작성, 컴파일, 테스트, 배포 등을 하나의 프로그램에서 처리할 수 있도록 만들어진 개발 도구

컴파일(compile)
-text type으로 작성된 소스코드를 컴퓨터에게 주입하기 위해 BIN(이진수)코드로 변환 하는것

컴파일러(compiler)
-소스코드를 컴파일하는 소프트웨어

변수(Varriable)
-연산을 수행할 데이터를 저장할 저장소(기억장소)
-연산을 수행할 데이터를 기억장소에 저장할땨, 개발자가 직접 위치를 지정

-자바(Java) 언어의 특징
1. 완전한 객체지향 언어이다.
2. 운영체제 독립적이다.
3. 비교적 배우기 슆다
4. 자동메모리 관리(Gabage collection)가 된다
5. 네트워크와 분산 처리를 지원한다.
6 .멀티스레드를 지원한다.
7. 동적로딩(Dynamic Loading)을 지원한다.

프로그래머, 개발자(Programer, Developer)
-코드 작성, 분석 및 구현, 디버깅, 컴파일, 테스트 및 구현을 통해 원하는 출력물을 만들어 내는 일
-시스템이 제대로 작동하기 위한 모든 다양한 요소를 다룰 수 있는 영역
-다양한 유형의 복잡한 시나리오와 프로그램을 다룬다.
-문제에 대한 솔루션을 개념화 하고 분석한 다음 문제 해결 방법을 결정
-사소한 문제로 인해 발생할 수 있는 것들을 발견하고 예방한다.
-코드분석, 패턴 디자인 등을 연구하고 습득 향상 시킨다.

Method : 메서드, 메소드, 함수(function)
-jdk에서 지원하지 않는 여러 명령문을 그룹으로 묶어 명령(어)처럼 사용한다.
-method를 사용(실행)하려면 먼저 method가 정의 되어야 한다.
public int num(){
	return 100;
}
-method의 실행 결과를 다른 변수에 저장 할 수 있다.
int result = num();

JDK(Java Developement Kit)
-java언어를 base로 하여 Application을 개발하는데 활용 할 수 있는 미리 준비된 class, method들의 모음
-마치 모형 kit를 조립하는 것처럼, 아이디어를 현실화 할 수 있는 매우 다양한 기능들이 이미 준비되어 있음
-JDK 도구만 잘 사용하여도 아이디어를 Application으로 구현 할수 있음
-JDK 11 기준 14,500여개는 소스코드도 공개되어 있음

객체지향 프로그래맹(OOP)
-컴퓨터 프로그래밍 패러다임의 한가지로 프로그래밍에서 필요한 데이터를 추상화하고 상태와 행위를 가진 객체를 만들고
그 객체들 간의 유기적인 상호 작용을 통해 문제를 해결하는 프로그래밍 방법이다.

오류(Error)
1. 코딩 문법오류로 인한 컴파일 시 오류와 런타임(실행)시 널 포인트 참조와 같은 오류로 심각한 문제를 야기 시켜 
프로세스(애플리케이션)가 종료 되거나 중단된다.
2. 시스템 에러(Error)는 컴퓨터 하드웨어의 오동작 또는 고장으로 인해 응용프로그램에 이상이 생겼거나 JVM실행에 문제가 생겼을 경우 발생하는 것
3. 코딩 문법 오류가 아닌 경우 개발자가 미리 예측하여 처리할 수없는 경우가 많아 애플리케이션에서 오류에 대한 처리(해결)를 할 수 없는 경우가 많다.
4. 오류가 발생하는 상황을 미리 예측하여 Exception처럼 핸들링 할 수도 있다.

Exception
1. 오류와 같이 응용프로그램, 프로세스를 종료 시키는 것은 유사하다.
2. 오류와 달리 개발자가 예측할 수 있고 적절한 처리(Exception Handing)를 수행하여 최소한 응용프로그램, 프로세스 종료를 방지할 수 있다. 

클래스(class)
1. 일반적인 코드 개념에서 모듈에 해당되며 코드를 파일로 분리하여 작성하는 것
2. 객체지향 프로그래밍 언어인 자바에서는 연관되어 있는 메서드 변수들을 모아 놓은 집합으로 객체를 만들기 위한 설계도 역할 수행

객체(object)
1. 객체지향 프로그래밍에서 실제로 구현해야 할 대상
2. 클래스를 사용하여 선언된 변수 상태

인스턴스(instance)
1.클래스를 바탕으로 선언된 object를 메모리에 탑재하고 사용가능한 상태가 되는 구체적인 실체
2. 인스턴스는 객체에 포함되는 개념이지만, 객체는 아직 사용할 준비가 덜 된 상태이고 인스턴스가 되었을 때 객체의 매서드 등을 호출하여 실행할 수 있다.

-소스코드
1. Text type 의 *.java파일
2. 메모장 등으로 내용을 읽을 수 있다.
3. 영어 문장과 유사한 문법으로 작성한다.
-이진 기계어 코드(Binary Machine Code)
1. 컴퓨터의 cpu가 해석 할 수 있는 이진수 모음으로 만들어진 코드
2. 소스코드를 컴파일(compile)과정을 거쳐 생성된다.
3. *java 코드를 컴파일 하면 *.class 파일이 생성되며 코드가 저장된다.
-Application 실행
1. 이진 기계어 코드를 컴퓨터의 주기억장치(main memory)에 올리고(loading) 수선대로 cpu로 보내어 명령을 실행하고, 연산을 수행하는것
2.연산 결과는 console등의 화면에 출력한다.

-
for(초기화코드; 비교연산문; 변수변환){  }
for(index =0; index<10; index++){  }
1. 초기화 코드는 for() 명령이 실행될때 최초 한번만  실행 보통 변수를 초기화, clear 하는 코드 실행
2. 비교연산문의 연산 결과가 true일때 블럭 {  } 코드 실행
3. 변수변환 연산에 의해 비교연산문에서 사용할 변수 값을 증, 감 연산하는 코드

모듈(Module)
1. 파일, 폴더 단위로 코드 조각들을모아서 프로그래밍을 한다. 이코드 조각들을 패키징하여 하나의 프로젝트를 구현한다.
2. 코드 조각들을 모은 파일, 폴더 단위를 모듈이라고 한다.
3. 프로그래밍 언어마다 구현 방식이 다르다
4. 모듈을 모아서 최종프로젝트를 완성하는데 이것을 build 한다 라고 한다.
자바의 클래스
1. 자바는 모듈을 클래스파일(*.java) 로 생성한다.
2. 클래스파일은 패키지(ppackage,  폴더) 단위로 묶는다.
3. 클래스 파일에는 메서드(method)를 구현한다.
4. 자바의 클래스 파일(모듈)은 다른 언어와 달리'변수(데이터)도 함께 포함 할 수 있다.
5. 메서드와 변수 묶음 => 클래스묶음 => 패키지 묶음 => 프로젝트 build => application

method
1. 프로그래밍 언어에서 공통으로 function, 함수 라고 부른다.
2. 자바에서는 항상 class {  } 블럭 내부에 선언되므로 축소적 의미로 method라고 한다.
자바의 중요 method
1. public static void main(String[] args) {  ]
 진입점, 시작점 method 이며, 자바코드를 Run 했을때 jvn에 의해 제일먼저 호출되는 method 이다
2. public ServiceV1() {  }
 생성자 method이며, 클래스를 선언하면 자동으로 선언된다.
 ServiceV1 serviceV1 = new ServiceV1()처럼 
 클래스를 사용하여 인스턴스를 생성할때 호출한다.
 클래스 영역의 변수들을 초기화하는 코드를 포함한다.

변수(Varriable)
- 연산을 수행할 데이터를 저장할 저장소(기억장소)
- 연산을 수행할 데이터를 기억장소에 저장할때, 개발자가 저장 위치에 붙인 이름, 별명
인스턴스(Instance)
- 클래스를 사용하여 선언한 객체(object)이며, new 키워드와 생성자를 통해 초기화된 상태
- 변수의 명명규칙과 동일한 방식으로 이름부여
- 클래스에 선언된 method를 호출하거나 클래스 변수(속성)에 접근(읽고, 쓰기)할 때 연결하는 통로 역할 수행

변수 scope
-변수, 인스턴스, 메서드 등은 선언된 위치, 접근제한자 설정에 따라 외부에서 접근 하는 방식이 다르다.
public static void main(String[] args){
	int intNum = 0;
}
-main method에서 선언된 intNum 변수는 main method 블럭 (  {  }   )이 종료되면 소멸된다.
for(int i = 0; i < 100; i++) {
	int intSum = 0;
	intSum += i;
}
-for() 명령문에 선언된 변수 i와 for() 명령 블럭(  {  }  )에 선언된 intSum은 for() 명령문 블럭(  {  }  )이 끝나면 사용할 수 없다.

클래스, 변수, 메서드 및 속성 이름 작명 코딩 패텅 : 이름작성 case 패턴
1. 표준(lower)Camel case : myName
2. Upper Camel case : ServiceV1, ScoreService, StudentService
3. Kebab case : my-name, ham-button, top-menu
4. 헝가리언 표기법 : intKor, strNation, bYes
5. snack case(Underscore notation : my_name
6. Upper Case fomat( 시스템, 전역변수 사용) : MY_PROJECT_USER_NAME

생성자 method
1. 클래스를 사용하여 객체(object) 선언 후 인스턴스화 할때 호출하는 method
2. 생성자 method는 return type(void, int, String 등)이 없다
3. 클래스 이름과 같다.(첫글자 대문자)
4. 클래스를 선언하면 "기본 생성자"는 자동으로 선언된다.
5. "임의 생성자"를 선언하면 기본 생성자를 선언해 주어야 한다.
6. 생성자에서는 인스턴스변수(클래스 영역의 변수)를 초기화 하는 코드가 포함된다.
public class ServiceV1{
	private String[] students;
	public ServiceV1(){
		this(10);
	}
	public ServiceV1(int length){
		student = new String[length];
	}
}

자바(Java)의 역사
1.
2.
3.
4.
5.
6.

Module이란
1. 모듈화를 통해 분리된 시스템의 기능등로, 서브루틴, 서브시스템, 함수, methode 등을 말한다.
Module의 결합도
1. 모듈 간의 상호 의존하는 정도 또는 두 모듈 사이의 연관 관계
Module의 응집도
1. 정보 은닉 개념을 확장한 것으로, 명령이나 호출문 등 모듈의 내부 요소들의 서로 관련되어 있는 정도
2. 모듈이 독립적인 기능으로 정의 되어 있는 정도를 의미
잘 설계된 Module 은?
1. 결합도는 낮고, 응집도는 높아야 한다.

